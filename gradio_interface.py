import gradio as gr
import pandas as pd
import json
import os
import tempfile
import time
from typing import Dict, List, Any, Tuple, Optional
from rules_manager import RulesManager
from excel_validator_core import ExcelValidatorCore

class GradioInterface:
    """Interface Gradio pour l'application de validation Excel avec r√®gles multicolonnes"""
    
    def __init__(self):
        try:
            self.rules_manager = RulesManager()
            print("RulesManager initialized successfully")
        except Exception as e:
            print(f"Failed to initialize RulesManager: {e}")
            self.rules_manager = None
        self.validator = ExcelValidatorCore()
        
    def create_interface(self) -> gr.Blocks:
        """Cr√©e l'interface Gradio compl√®te"""
        
        with gr.Blocks(
            title="üìä Excel Validator Pro",
            theme=gr.themes.Soft(),
            css="""
            .main-title { text-align: center; color: #2E86AB; margin-bottom: 2rem; }
            .section-title { color: #A23B72; border-bottom: 2px solid #A23B72; padding-bottom: 0.5rem; }
            .success-message { background-color: #d4edda; color: #155724; padding: 1rem; border-radius: 0.5rem; }
            .error-message { background-color: #f8d7da; color: #721c24; padding: 1rem; border-radius: 0.5rem; }
            .conditional-section { border: 2px solid #A23B72; border-radius: 8px; padding: 1rem; margin: 1rem 0; }
            .multicolumn-section { border: 2px solid #28a745; border-radius: 8px; padding: 1rem; margin: 1rem 0; }
            """
        ) as interface:
            
            gr.Markdown("# üìä Excel Validator Pro", elem_classes=["main-title"])
            gr.Markdown("### Application de validation Excel avec r√®gles configurables et multicolonnes")
            
            with gr.Tabs():
                # Page d'accueil
                with gr.Tab("üè† Accueil"):
                    self._create_home_tab()
                
                # Page de cr√©ation de r√®gles
                with gr.Tab("‚ûï Cr√©er des R√®gles"):
                    with gr.Tabs():
                        # R√®gles simples
                        with gr.Tab("üìù R√®gles Simples"):
                            self._create_simple_rules_section()
                        
                        # R√®gles conditionnelles
                        with gr.Tab("üîó R√®gles Conditionnelles"):
                            self._create_conditional_rules_section()
                        
                        # R√®gles multicolonnes 
                        with gr.Tab("üî¢ R√®gles Multicolonnes"):
                            self._create_multicolumn_rules_section()
                
                # Page de gestion des r√®gles
                with gr.Tab("üìã G√©rer les R√®gles"):
                    rules_table, refresh_rules_func = self._create_management_tab()
                
                # Page de validation
                with gr.Tab("‚úÖ Validation Excel"):
                    active_rules_info, get_active_rules_func = self._create_validation_tab()
            
            # Actualisation des donn√©es au chargement
            interface.load(get_active_rules_func, outputs=[active_rules_info])
            interface.load(refresh_rules_func, outputs=[rules_table])
        
        return interface
    
    def _create_home_tab(self):
        """Cr√©e l'onglet d'accueil"""
        gr.Markdown("""
        ## üéØ Fonctionnalit√©s principales
        
        - üìù **R√®gles simples** : NotBlank, Length, Type, Regex, Email, Choice, Country, Date
        - üîç **R√®gles de comparaison** : Plus grand/petit que, √©gal, diff√©rent, commence/finit par, contient
        - üîç **D√©tection de doublons** : Identification des valeurs dupliqu√©es dans une colonne
        - üîó **R√®gles conditionnelles avanc√©es** : "Si colonne A = X alors colonne B doit √™tre Y"
        - üî¢ **R√®gles multicolonnes** : Validation sur plusieurs colonnes simultan√©ment
        - üìã **Gestion centralis√©e** : Activer/d√©sactiver, modifier, supprimer vos r√®gles
        - ‚úÖ **Validation rapide** : Drag & drop de vos fichiers Excel
        - üìä **Rapports d√©taill√©s** : Identification pr√©cise des erreurs avec export
        
        
        ### üìö Comment utiliser l'application ?
        
        1. **√âtape 1** : Cr√©ez vos r√®gles de validation dans l'onglet "Cr√©er des R√®gles"
           - **R√®gles Simples** : Validation directe d'une colonne
           - **R√®gles Conditionnelles** : "Si... alors..." avec conditions multiples
           - **R√®gles Multicolonnes** : Validation sur plusieurs colonnes simultan√©ment
        2. **√âtape 2** : G√©rez vos r√®gles dans "G√©rer les R√®gles"
        3. **√âtape 3** : Validez vos fichiers Excel dans "Validation Excel"
        
        ### üöÄ Avantages
        
        - ‚ú® **Interface intuitive** - Pas besoin de connaissances techniques
        - ‚ö° **Validation rapide** - Traitement de fichiers jusqu'√† 10 000 lignes
        - üé® **Personnalisation totale** - Cr√©ez vos propres r√®gles m√©tier
        - üíæ **Sauvegarde automatique** - Vos r√®gles sont conserv√©es entre les sessions
        - üî¢ **Validation avanc√©e** - R√®gles sur plusieurs colonnes simultan√©ment
        """)
    
    def _create_multicolumn_rules_section(self):
        """Section pour cr√©er des r√®gles multicolonnes """
        gr.Markdown("## üî¢ Cr√©ation de R√®gles Multicolonnes", elem_classes=["section-title"])
        
        with gr.Row():
            with gr.Column():
                gr.Markdown("### üí° R√®gles multicolonnes disponibles")
                
                # Affichage des types de r√®gles disponibles
                rule_types = self.rules_manager.get_multicolumn_rule_types()
                examples_text = ""
                for rule_id, rule_info in rule_types.items():
                    examples_text += f"**{rule_info['name']}** : {rule_info['example']}\\n"
                
                gr.Markdown(examples_text)
        
        gr.Markdown("---")
        
        with gr.Row():
            with gr.Column():
                gr.Markdown("#### üìã **Configuration de base**", elem_classes=["multicolumn-section"])
                
                columns_input = gr.Textbox(
                    label="Colonnes concern√©es (s√©par√©es par virgules)",
                    placeholder="ex: A,B,C ou Montant1,Montant2,Total",
                    lines=2
                )
                
                rule_type_multi = gr.Dropdown(
                    label="Type de r√®gle multicolonne",
                    choices=[
                        ("Somme √©gale (A + B = C)", "sum_equals"),
                        ("Somme dans une plage (A + B + C entre min et max)", "sum_range"),
                        ("Date ant√©rieure (Date1 < Date2)", "date_before"),
                        ("Date post√©rieure (Date1 > Date2)", "date_after"),
                        ("√âcart de dates (Date2 - Date1 entre X et Y jours)", "date_range"),
                        ("Pourcentage de (A = X% de B)", "percentage_of"),
                        ("Tout ou rien (toutes remplies OU toutes vides)", "all_or_none"),
                        ("Combinaison unique (A+B+C unique)", "unique_combination"),
                        ("Somme conditionnelle (Si D=X alors A+B+C > Y)", "conditional_sum"),
                        ("Maximum/Minimum (C = MAX(A,B) ou MIN(A,B))", "max_min_check")
                    ],
                    value="sum_equals"
                )
                
                message_multi = gr.Textbox(
                    label="Message d'erreur personnalis√©",
                    placeholder="ex: La somme des montants n'est pas correcte",
                    lines=2
                )
            
            with gr.Column():
                gr.Markdown("#### ‚öôÔ∏è **Param√®tres sp√©cifiques**", elem_classes=["multicolumn-section"])
                
                # Param√®tres pour sum_equals
                with gr.Group():
                    gr.Markdown("**Param√®tres pour 'Somme √©gale'**")
                    sum_equals_target = gr.Textbox(
                        label="Colonne cible (qui doit √©galer la somme)",
                        placeholder="ex: C (derni√®re colonne par d√©faut)",
                        visible=True
                    )
                    sum_equals_tolerance = gr.Number(
                        label="Tol√©rance",
                        value=0.01,
                        visible=True
                    )
                
                # Param√®tres pour sum_range
                with gr.Group():
                    gr.Markdown("**Param√®tres pour 'Somme dans une plage'**")
                    sum_range_min = gr.Number(
                        label="Valeur minimale",
                        value=0,
                        visible=False
                    )
                    sum_range_max = gr.Number(
                        label="Valeur maximale",
                        value=1000,
                        visible=False
                    )
                
                # Param√®tres pour date_range
                with gr.Group():
                    gr.Markdown("**Param√®tres pour '√âcart de dates'**")
                    date_range_min = gr.Number(
                        label="√âcart minimum (jours)",
                        value=1,
                        visible=False
                    )
                    date_range_max = gr.Number(
                        label="√âcart maximum (jours)",
                        value=365,
                        visible=False
                    )
                
                # Param√®tres pour percentage_of
                with gr.Group():
                    gr.Markdown("**Param√®tres pour 'Pourcentage de'**")
                    percentage_value = gr.Number(
                        label="Pourcentage attendu (%)",
                        value=20,
                        visible=False
                    )
                    percentage_tolerance = gr.Number(
                        label="Tol√©rance (%)",
                        value=5,
                        visible=False
                    )
                
                # Param√®tres pour unique_combination
                with gr.Group():
                    gr.Markdown("**Param√®tres pour 'Combinaison unique'**")
                    unique_case_sensitive = gr.Checkbox(
                        label="Sensible √† la casse",
                        value=True,
                        visible=False
                    )
                
                # Param√®tres pour conditional_sum
                with gr.Group():
                    gr.Markdown("**Param√®tres pour 'Somme conditionnelle'**")
                    conditional_column = gr.Textbox(
                        label="Colonne condition",
                        placeholder="ex: D, Statut",
                        visible=False
                    )
                    conditional_value = gr.Textbox(
                        label="Valeur condition",
                        placeholder="ex: VIP, Premium",
                        visible=False
                    )
                    conditional_operator = gr.Dropdown(
                        label="Op√©rateur de comparaison",
                        choices=[
                            ("Plus grand que", "greater_than"),
                            ("Plus petit que", "less_than"),
                            ("√âgal √†", "equals"),
                            ("Plus grand ou √©gal", "greater_equal"),
                            ("Plus petit ou √©gal", "less_equal")
                        ],
                        value="greater_than",
                        visible=False
                    )
                    conditional_target = gr.Number(
                        label="Valeur cible",
                        value=1000,
                        visible=False
                    )
                
                # Param√®tres pour max_min_check
                with gr.Group():
                    gr.Markdown("**Param√®tres pour 'Maximum/Minimum'**")
                    max_min_operation = gr.Dropdown(
                        label="Op√©ration",
                        choices=[("Maximum", "max"), ("Minimum", "min")],
                        value="max",
                        visible=False
                    )
                    max_min_target = gr.Dropdown(
                        label="Position colonne cible",
                        choices=[("Derni√®re colonne", "last"), ("Premi√®re colonne", "first")],
                        value="last",
                        visible=False
                    )
                    max_min_tolerance = gr.Number(
                        label="Tol√©rance",
                        value=0.01,
                        visible=False
                    )
        
        # Boutons d'action
        gr.Markdown("---")
        with gr.Row():
            create_multi_btn = gr.Button("‚úÖ Cr√©er la r√®gle multicolonne", variant="primary", size="lg")
            clear_multi_btn = gr.Button("üóëÔ∏è Effacer tous les champs", variant="secondary")
            preview_multi_btn = gr.Button("üëÅÔ∏è Pr√©visualiser la r√®gle", variant="secondary")
        
        # Zone de r√©sultat et pr√©visualisation
        with gr.Row():
            with gr.Column():
                result_multicolumn = gr.Markdown()
            with gr.Column():
                preview_multicolumn = gr.Markdown()
        
        # Fonctions pour l'interface multicolonne
        def update_multicolumn_params_visibility(rule_type):
            """Met √† jour la visibilit√© des param√®tres selon le type de r√®gle"""
            return [
                # sum_equals
                gr.update(visible=rule_type == "sum_equals"),
                gr.update(visible=rule_type == "sum_equals"),
                # sum_range
                gr.update(visible=rule_type == "sum_range"),
                gr.update(visible=rule_type == "sum_range"),
                # date_range
                gr.update(visible=rule_type == "date_range"),
                gr.update(visible=rule_type == "date_range"),
                # percentage_of
                gr.update(visible=rule_type == "percentage_of"),
                gr.update(visible=rule_type == "percentage_of"),
                # unique_combination
                gr.update(visible=rule_type == "unique_combination"),
                # conditional_sum
                gr.update(visible=rule_type == "conditional_sum"),
                gr.update(visible=rule_type == "conditional_sum"),
                gr.update(visible=rule_type == "conditional_sum"),
                gr.update(visible=rule_type == "conditional_sum"),
                # max_min_check
                gr.update(visible=rule_type == "max_min_check"),
                gr.update(visible=rule_type == "max_min_check"),
                gr.update(visible=rule_type == "max_min_check")
            ]
        
        def preview_multicolumn_rule(columns, rule_type, message, *params):
            """Pr√©visualise une r√®gle multicolonne"""
            try:
                if not columns:
                    return "‚ùå Veuillez saisir les colonnes concern√©es"
                
                columns_list = [col.strip() for col in columns.split(",") if col.strip()]
                if len(columns_list) < 2:
                    return "‚ùå Au moins 2 colonnes sont n√©cessaires pour une r√®gle multicolonne"
                
                rule_types = self.rules_manager.get_multicolumn_rule_types()
                rule_info = rule_types.get(rule_type, {})
                rule_name = rule_info.get("name", rule_type)
                
                preview = f"### üëÅÔ∏è Aper√ßu de votre r√®gle multicolonne\\n\\n"
                preview += f"**üî¢ TYPE :** {rule_name}\\n"
                preview += f"**üìä COLONNES :** {', '.join(columns_list)} ({len(columns_list)} colonnes)\\n"
                
                # Ajouter des d√©tails sp√©cifiques selon le type
                if rule_type == "sum_equals":
                    preview += f"**üìê R√àGLE :** {' + '.join(columns_list[:-1])} = {columns_list[-1]}\\n"
                elif rule_type == "sum_range":
                    preview += f"**üìê R√àGLE :** {' + '.join(columns_list)} entre {params[2]} et {params[3]}\\n"
                elif rule_type == "date_before":
                    preview += f"**üìê R√àGLE :** {columns_list[0]} < {columns_list[1]}\\n"
                elif rule_type == "date_after":
                    preview += f"**üìê R√àGLE :** {columns_list[0]} > {columns_list[1]}\\n"
                elif rule_type == "percentage_of":
                    preview += f"**üìê R√àGLE :** {columns_list[0]} = {params[6]}% de {columns_list[1]} (¬±{params[7]}%)\\n"
                elif rule_type == "unique_combination":
                    preview += f"**üìê R√àGLE :** Combinaison {'+'.join(columns_list)} unique dans le fichier\\n"
                
                preview += f"**üìù MESSAGE :** {message}\\n"
                
                return preview
                
            except Exception as e:
                return f"‚ùå Erreur dans la pr√©visualisation : {str(e)}"
        
        def create_multicolumn_rule(columns, rule_type, message, *params):
            """Cr√©e une r√®gle multicolonne"""
            try:
                if not columns:
                    return "‚ùå Veuillez saisir les colonnes concern√©es"
                
                columns_list = [col.strip() for col in columns.split(",") if col.strip()]
                if len(columns_list) < 2:
                    return "‚ùå Au moins 2 colonnes sont n√©cessaires"
                
                # Construction des param√®tres selon le type
                rule_params = {}
                
                if rule_type == "sum_equals":
                    if params[0]:  # target_column
                        rule_params["target_column"] = params[0]
                    rule_params["tolerance"] = params[1] or 0.01
                    
                elif rule_type == "sum_range":
                    rule_params["min_value"] = params[2] or 0
                    rule_params["max_value"] = params[3] or 1000
                    
                elif rule_type == "date_range":
                    rule_params["min_days"] = params[4] or 1
                    rule_params["max_days"] = params[5] or 365
                    
                elif rule_type == "percentage_of":
                    rule_params["percentage"] = params[6] or 20
                    rule_params["tolerance"] = (params[7] or 5) / 100.0
                    
                elif rule_type == "unique_combination":
                    rule_params["case_sensitive"] = params[8] if params[8] is not None else True
                    
                elif rule_type == "conditional_sum":
                    if not params[9]:  # conditional_column
                        return "‚ùå Veuillez saisir la colonne condition"
                    rule_params["condition_column"] = params[9]
                    rule_params["condition_value"] = params[10] or ""
                    rule_params["operator"] = params[11] or "greater_than"
                    rule_params["target_value"] = params[12] or 1000
                    
                elif rule_type == "max_min_check":
                    rule_params["operation"] = params[13] or "max"
                    rule_params["target_column"] = params[14] or "last"
                    rule_params["tolerance"] = params[15] or 0.01
                
                # Cr√©er la r√®gle
                rule = self.rules_manager.add_multicolumn_rule(
                    columns_list, rule_type, rule_params, message
                )
                self.rules_manager.save_rules()
                
                success_msg = f"""
                ‚úÖ **R√®gle multicolonne cr√©√©e avec succ√®s !**
                
                **üìã D√©tails :**
                - **ID :** {rule['id']}
                - **Type :** {rule_type}
                - **Colonnes :** {', '.join(columns_list)}
                - **Message :** {message}
                
                üéØ La r√®gle est maintenant active et sera appliqu√©e lors de la validation.
                """
                
                return success_msg
                
            except Exception as e:
                return f"‚ùå **Erreur lors de la cr√©ation :** {str(e)}"
        
        def clear_multicolumn_form():
            """Remet √† z√©ro tous les champs du formulaire multicolonne"""
            return [
                "",  # columns_input
                "sum_equals",  # rule_type_multi
                "",  # message_multi
                "",  # sum_equals_target
                0.01,  # sum_equals_tolerance
                0,  # sum_range_min
                1000,  # sum_range_max
                1,  # date_range_min
                365,  # date_range_max
                20,  # percentage_value
                5,  # percentage_tolerance
                True,  # unique_case_sensitive
                "",  # conditional_column
                "",  # conditional_value
                "greater_than",  # conditional_operator
                1000,  # conditional_target
                "max",  # max_min_operation
                "last",  # max_min_target
                0.01,  # max_min_tolerance
                "",  # result_multicolumn
                ""   # preview_multicolumn
            ]
        
        # √âv√©nements de l'interface multicolonne
        rule_type_multi.change(
            update_multicolumn_params_visibility,
            inputs=[rule_type_multi],
            outputs=[
                sum_equals_target, sum_equals_tolerance,
                sum_range_min, sum_range_max,
                date_range_min, date_range_max,
                percentage_value, percentage_tolerance,
                unique_case_sensitive,
                conditional_column, conditional_value, conditional_operator, conditional_target,
                max_min_operation, max_min_target, max_min_tolerance
            ]
        )
        
        preview_multi_btn.click(
            preview_multicolumn_rule,
            inputs=[
                columns_input, rule_type_multi, message_multi,
                sum_equals_target, sum_equals_tolerance,
                sum_range_min, sum_range_max,
                date_range_min, date_range_max,
                percentage_value, percentage_tolerance,
                unique_case_sensitive,
                conditional_column, conditional_value, conditional_operator, conditional_target,
                max_min_operation, max_min_target, max_min_tolerance
            ],
            outputs=[preview_multicolumn]
        )
        
        create_multi_btn.click(
            create_multicolumn_rule,
            inputs=[
                columns_input, rule_type_multi, message_multi,
                sum_equals_target, sum_equals_tolerance,
                sum_range_min, sum_range_max,
                date_range_min, date_range_max,
                percentage_value, percentage_tolerance,
                unique_case_sensitive,
                conditional_column, conditional_value, conditional_operator, conditional_target,
                max_min_operation, max_min_target, max_min_tolerance
            ],
            outputs=[result_multicolumn]
        )
        
        clear_multi_btn.click(
            clear_multicolumn_form,
            outputs=[
                columns_input, rule_type_multi, message_multi,
                sum_equals_target, sum_equals_tolerance,
                sum_range_min, sum_range_max,
                date_range_min, date_range_max,
                percentage_value, percentage_tolerance,
                unique_case_sensitive,
                conditional_column, conditional_value, conditional_operator, conditional_target,
                max_min_operation, max_min_target, max_min_tolerance,
                result_multicolumn, preview_multicolumn
            ]
        )
    
    def _create_simple_rules_section(self):
        """Section pour cr√©er des r√®gles simples"""
        gr.Markdown("## üìù Cr√©ation de R√®gles Simples", elem_classes=["section-title"])
        
        # Onglets pour r√®gles simple et simple multicolonne
        with gr.Tabs():
            # R√®gles simples classiques (une colonne)
            with gr.Tab("üìç Une colonne"):
                self._create_single_column_rules()
            
            # R√®gles simples multicolonnes
            with gr.Tab("üìä Plusieurs colonnes"):
                self._create_multi_simple_rules()
    
    def _create_single_column_rules(self):
        """Section pour cr√©er des r√®gles simples"""
        gr.Markdown("## üìù Cr√©ation de R√®gles Simples")
        
        with gr.Row():
            with gr.Column():
                column_input = gr.Textbox(label="Colonne Excel (ex: A, B, C...)", value="A")
                
                rule_type_dropdown = gr.Dropdown(
                    label="Type de r√®gle",
                    choices=[
                        ("Ne pas √™tre vide", "NotBlank"),
                        ("Longueur du texte", "Length"),
                        ("Type de donn√©es", "Type"),
                        ("Expression r√©guli√®re", "Regex"),
                        ("Adresse email", "Email"),
                        ("Choix dans une liste", "Choice"),
                        ("Nom de pays", "Country"),
                        ("Date", "Date"),
                        ("Comparaison", "Comparison"),
                        ("D√©tection de doublons", "Duplicate")
                    ],
                    value="NotBlank"
                )
                
                message_input = gr.Textbox(
                    label="Message d'erreur personnalis√©",
                    placeholder="Cette cellule ne peut pas √™tre vide",
                    lines=2
                )
            
            with gr.Column():
                # Param√®tres pour Length
                min_length = gr.Number(label="Longueur minimale", visible=False, value=0)
                max_length = gr.Number(label="Longueur maximale", visible=False, value=100)
                
                # Param√®tres pour Type
                data_type = gr.Dropdown(
                    label="Type de donn√©es",
                    choices=[("Nombre entier", "integer"), ("Nombre d√©cimal", "float"), ("Bool√©en", "bool")],
                    visible=False,
                    value="integer"
                )
                
                # Param√®tres pour Regex
                regex_pattern = gr.Textbox(label="Pattern regex", visible=False)
                
                # Param√®tres pour Choice
                choices_input = gr.Textbox(label="Choix possibles (s√©par√©s par virgules)", visible=False)
                choice_case_sensitive = gr.Checkbox(label="Sensible √† la casse", visible=False, value=True)
                
                # Param√®tres pour Comparison
                comparison_operator = gr.Dropdown(
                    label="Op√©rateur de comparaison",
                    choices=[
                        ("√âgal √†", "equals"),
                        ("Diff√©rent de", "not_equals"),
                        ("Plus grand que", "greater_than"),
                        ("Plus petit que", "less_than"),
                        ("Plus grand ou √©gal", "greater_equal"),
                        ("Plus petit ou √©gal", "less_equal"),
                        ("Commence par", "starts_with"),
                        ("Finit par", "ends_with"),
                        ("Contient", "contains"),
                        ("Ne contient pas", "not_contains")
                    ],
                    visible=False,
                    value="equals"
                )
                comparison_value = gr.Textbox(label="Valeur de comparaison", visible=False)
                
                # Param√®tres pour Duplicate
                duplicate_case_sensitive = gr.Checkbox(label="Sensible √† la casse", visible=False, value=True)
                
                # Option commune
                trim_option = gr.Checkbox(label="Supprimer les espaces en d√©but/fin", value=False)
        
        # Boutons d'action
        with gr.Row():
            create_btn = gr.Button("‚úÖ Cr√©er la r√®gle", variant="primary")
            clear_btn = gr.Button("üóëÔ∏è Effacer", variant="secondary")
        
        result_simple = gr.Markdown()
        
        # Fonction pour mettre √† jour les param√®tres selon le type de r√®gle
        def update_params_visibility(rule_type):
            return [
                gr.update(visible=rule_type == "Length"),
                gr.update(visible=rule_type == "Length"),
                gr.update(visible=rule_type == "Type"),
                gr.update(visible=rule_type == "Regex"),
                gr.update(visible=rule_type == "Choice"),
                gr.update(visible=rule_type == "Choice"),
                gr.update(visible=rule_type == "Comparison"),
                gr.update(visible=rule_type == "Comparison"),
                gr.update(visible=rule_type == "Duplicate")
            ]
        
        rule_type_dropdown.change(
            update_params_visibility,
            inputs=[rule_type_dropdown],
            outputs=[min_length, max_length, data_type, regex_pattern, choices_input, 
                    choice_case_sensitive, comparison_operator, comparison_value, duplicate_case_sensitive]
        )
        
        # Fonction pour cr√©er une r√®gle simple
        def create_simple_rule(column, rule_type, message, min_len, max_len, dtype, regex, 
                             choices, choice_case, comp_op, comp_val, dup_case, trim):
            try:
                params = {"trim": trim}
                
                if rule_type == "Length":
                    if min_len > 0:
                        params["min"] = int(min_len)
                    if max_len > 0:
                        params["max"] = int(max_len)
                elif rule_type == "Type":
                    params["type"] = dtype
                elif rule_type == "Regex":
                    params["pattern"] = regex
                elif rule_type == "Choice":
                    params["choices"] = [choice.strip() for choice in choices.split(",") if choice.strip()]
                    params["caseSensitive"] = choice_case
                elif rule_type == "Comparison":
                    params["operator"] = comp_op
                    params["value"] = comp_val
                elif rule_type == "Duplicate":
                    params["caseSensitive"] = dup_case
                
                rule = self.rules_manager.add_simple_rule(column, rule_type, params, message)
                self.rules_manager.save_rules()
                
                return f"‚úÖ **R√®gle cr√©√©e avec succ√®s !**\\n\\n**ID:** {rule['id']}\\n**Colonne:** {column}\\n**Type:** {rule_type}"
                
            except Exception as e:
                return f"‚ùå **Erreur lors de la cr√©ation :** {str(e)}"
        
        create_btn.click(
            create_simple_rule,
            inputs=[column_input, rule_type_dropdown, message_input, min_length, max_length, 
                   data_type, regex_pattern, choices_input, choice_case_sensitive,
                   comparison_operator, comparison_value, duplicate_case_sensitive, trim_option],
            outputs=[result_simple]
        )
        
        # Fonction pour effacer les champs
        def clear_simple_form():
            return ["A", "NotBlank", "", 0, 100, "integer", "", "", True, "equals", "", True, False, ""]
        
        clear_btn.click(
            clear_simple_form,
            outputs=[column_input, rule_type_dropdown, message_input, min_length, max_length,
                    data_type, regex_pattern, choices_input, choice_case_sensitive,
                    comparison_operator, comparison_value, duplicate_case_sensitive, trim_option, result_simple]
        )
        pass

    def _create_multi_simple_rules(self):
        """Section pour les r√®gles simples sur plusieurs colonnes"""
        gr.Markdown("### üî¢ Appliquer une r√®gle simple √† plusieurs colonnes simultan√©ment")
        gr.Markdown("*Utile quand vous voulez appliquer la m√™me validation √† plusieurs colonnes d'un coup.*")
        
        with gr.Row():
            with gr.Column():
                gr.Markdown("#### üìã Configuration de base")
                
                multi_columns_input = gr.Textbox(
                    label="Colonnes concern√©es (s√©par√©es par virgules)",
                    placeholder="ex: A,B,C ou Nom,Pr√©nom,Email",
                    lines=2
                )
                
                multi_rule_type_dropdown = gr.Dropdown(
                    label="Type de r√®gle √† appliquer",
                    choices=[
                        ("Ne pas √™tre vide", "NotBlank"),
                        ("Longueur du texte", "Length"),
                        ("Type de donn√©es", "Type"),
                        ("Expression r√©guli√®re", "Regex"),
                        ("Adresse email", "Email"),
                        ("Choix dans une liste", "Choice"),
                        ("Nom de pays", "Country"),
                        ("Date", "Date"),
                        ("Comparaison", "Comparison")
                    ],
                    value="NotBlank"
                )
                
                multi_message_input = gr.Textbox(
                    label="Message d'erreur personnalis√©",
                    placeholder="ex: Ces colonnes ne peuvent pas √™tre vides",
                    lines=2
                )
            
            with gr.Column():
                gr.Markdown("#### ‚öôÔ∏è Param√®tres de la r√®gle")
                
                # Param√®tres pour Length
                multi_min_length = gr.Number(label="Longueur minimale", visible=False, value=0)
                multi_max_length = gr.Number(label="Longueur maximale", visible=False, value=100)
                
                # Param√®tres pour Type
                multi_data_type = gr.Dropdown(
                    label="Type de donn√©es",
                    choices=[("Nombre entier", "integer"), ("Nombre d√©cimal", "float"), ("Bool√©en", "bool")],
                    visible=False,
                    value="integer"
                )
                
                # Param√®tres pour Regex
                multi_regex_pattern = gr.Textbox(label="Pattern regex", visible=False)
                
                # Param√®tres pour Choice
                multi_choices_input = gr.Textbox(label="Choix possibles (s√©par√©s par virgules)", visible=False)
                multi_choice_case_sensitive = gr.Checkbox(label="Sensible √† la casse", visible=False, value=True)
                
                # Param√®tres pour Comparison
                multi_comparison_operator = gr.Dropdown(
                    label="Op√©rateur de comparaison",
                    choices=[
                        ("√âgal √†", "equals"),
                        ("Diff√©rent de", "not_equals"),
                        ("Plus grand que", "greater_than"),
                        ("Plus petit que", "less_than"),
                        ("Plus grand ou √©gal", "greater_equal"),
                        ("Plus petit ou √©gal", "less_equal"),
                        ("Commence par", "starts_with"),
                        ("Finit par", "ends_with"),
                        ("Contient", "contains"),
                        ("Ne contient pas", "not_contains")
                    ],
                    visible=False,
                    value="equals"
                )
                multi_comparison_value = gr.Textbox(label="Valeur de comparaison", visible=False)
                
                # Option commune
                multi_trim_option = gr.Checkbox(label="Supprimer les espaces en d√©but/fin", value=False)
        
        # Exemples d'utilisation
        with gr.Row():
            gr.Markdown("""
            #### üí° Exemples d'utilisation
            
            - **NotBlank sur A,B,C** : Les colonnes A, B et C doivent toutes √™tre non vides
            - **Length(3-50) sur Nom,Pr√©nom** : Le nom et pr√©nom doivent faire entre 3 et 50 caract√®res
            - **Email sur Email1,Email2,Email3** : Toutes les colonnes d'email doivent contenir des adresses valides
            - **Type(integer) sur Prix1,Prix2,Prix3** : Tous les prix doivent √™tre des nombres entiers
            - **Choice(['Oui','Non']) sur Accord1,Accord2** : Les r√©ponses doivent √™tre 'Oui' ou 'Non'
            """)
        
        # Boutons d'action
        gr.Markdown("---")
        with gr.Row():
            create_multi_simple_btn = gr.Button("‚úÖ Cr√©er la r√®gle simple multicolonne", variant="primary", size="lg")
            clear_multi_simple_btn = gr.Button("üóëÔ∏è Effacer tous les champs", variant="secondary")
            preview_multi_simple_btn = gr.Button("üëÅÔ∏è Pr√©visualiser la r√®gle", variant="secondary")
        
        # Zone de r√©sultat et pr√©visualisation
        with gr.Row():
            with gr.Column():
                result_multi_simple = gr.Markdown()
            with gr.Column():
                preview_multi_simple = gr.Markdown()
        
        # Fonction pour mettre √† jour les param√®tres selon le type de r√®gle
        def update_multi_simple_params_visibility(rule_type):
            return [
                gr.update(visible=rule_type == "Length"),
                gr.update(visible=rule_type == "Length"),
                gr.update(visible=rule_type == "Type"),
                gr.update(visible=rule_type == "Regex"),
                gr.update(visible=rule_type == "Choice"),
                gr.update(visible=rule_type == "Choice"),
                gr.update(visible=rule_type == "Comparison"),
                gr.update(visible=rule_type == "Comparison")
            ]
        
        multi_rule_type_dropdown.change(
            update_multi_simple_params_visibility,
            inputs=[multi_rule_type_dropdown],
            outputs=[multi_min_length, multi_max_length, multi_data_type, multi_regex_pattern, 
                    multi_choices_input, multi_choice_case_sensitive, multi_comparison_operator, multi_comparison_value]
        )
        
        # Fonction pour pr√©visualiser une r√®gle simple multicolonne
        def preview_multi_simple_rule(columns, rule_type, message, min_len, max_len, dtype, regex, 
                                    choices, choice_case, comp_op, comp_val, trim):
            try:
                if not columns:
                    return "‚ùå Veuillez saisir les colonnes concern√©es"
                
                columns_list = [col.strip() for col in columns.split(",") if col.strip()]
                if len(columns_list) < 2:
                    return "‚ùå Au moins 2 colonnes sont n√©cessaires pour une r√®gle multicolonne"
                
                rule_types_info = self.rules_manager.get_multi_simple_rule_types()
                rule_info = rule_types_info.get(rule_type, {})
                rule_name = rule_info.get("name", rule_type)
                
                preview = f"### üëÅÔ∏è Aper√ßu de votre r√®gle simple multicolonne\\n\\n"
                preview += f"**üìù TYPE :** {rule_name}\\n"
                preview += f"**üìä COLONNES :** {', '.join(columns_list)} ({len(columns_list)} colonnes)\\n"
                
                # D√©tails sp√©cifiques selon le type
                if rule_type == "NotBlank":
                    preview += f"**üìê R√àGLE :** Toutes les colonnes doivent √™tre non vides\\n"
                elif rule_type == "Length":
                    preview += f"**üìê R√àGLE :** Toutes les colonnes entre {min_len} et {max_len} caract√®res\\n"
                elif rule_type == "Type":
                    preview += f"**üìê R√àGLE :** Toutes les colonnes de type {dtype}\\n"
                elif rule_type == "Email":
                    preview += f"**üìê R√àGLE :** Toutes les colonnes doivent contenir des emails valides\\n"
                elif rule_type == "Choice":
                    choices_list = [c.strip() for c in choices.split(",") if c.strip()]
                    preview += f"**üìê R√àGLE :** Toutes les colonnes dans {choices_list}\\n"
                elif rule_type == "Regex":
                    preview += f"**üìê R√àGLE :** Toutes les colonnes respectent le pattern '{regex}'\\n"
                elif rule_type == "Comparison":
                    preview += f"**üìê R√àGLE :** Toutes les colonnes {comp_op} '{comp_val}'\\n"
                
                preview += f"**üìù MESSAGE :** {message}\\n"
                preview += f"**‚öôÔ∏è OPTIONS :** Trim = {'Oui' if trim else 'Non'}\\n"
                
                return preview
                
            except Exception as e:
                return f"‚ùå Erreur dans la pr√©visualisation : {str(e)}"
        
        # Fonction pour cr√©er une r√®gle simple multicolonne
        def create_multi_simple_rule(columns, rule_type, message, min_len, max_len, dtype, regex, 
                                    choices, choice_case, comp_op, comp_val, trim):
            try:
                if not columns:
                    return "‚ùå Veuillez saisir les colonnes concern√©es"
                
                columns_list = [col.strip() for col in columns.split(",") if col.strip()]
                if len(columns_list) < 2:
                    return "‚ùå Au moins 2 colonnes sont n√©cessaires"
                
                # Construction des param√®tres selon le type
                params = {"trim": trim}
                
                if rule_type == "Length":
                    if min_len > 0:
                        params["min"] = int(min_len)
                    if max_len > 0:
                        params["max"] = int(max_len)
                elif rule_type == "Type":
                    params["type"] = dtype
                elif rule_type == "Regex":
                    if not regex:
                        return "‚ùå Veuillez saisir un pattern regex"
                    params["pattern"] = regex
                elif rule_type == "Choice":
                    if not choices:
                        return "‚ùå Veuillez saisir les choix possibles"
                    params["choices"] = [choice.strip() for choice in choices.split(",") if choice.strip()]
                    params["caseSensitive"] = choice_case
                elif rule_type == "Comparison":
                    if not comp_val:
                        return "‚ùå Veuillez saisir une valeur de comparaison"
                    params["operator"] = comp_op
                    params["value"] = comp_val
                
                # Cr√©er la r√®gle
                rule = self.rules_manager.add_multi_simple_rule(
                    columns_list, rule_type, params, message
                )
                self.rules_manager.save_rules()
                
                success_msg = f"""
                ‚úÖ **R√®gle simple multicolonne cr√©√©e avec succ√®s !**
                
                **üìã D√©tails :**
                - **ID :** {rule['id']}
                - **Type :** {rule_type}
                - **Colonnes :** {', '.join(columns_list)} ({len(columns_list)} colonnes)
                - **Message :** {message}
                
                üéØ La r√®gle sera appliqu√©e √† chaque colonne individuellement lors de la validation.
                """
                
                return success_msg
                
            except Exception as e:
                return f"‚ùå **Erreur lors de la cr√©ation :** {str(e)}"
        
        # Fonction pour effacer le formulaire
        def clear_multi_simple_form():
            return [
                "",  # multi_columns_input
                "NotBlank",  # multi_rule_type_dropdown
                "",  # multi_message_input
                0,  # multi_min_length
                100,  # multi_max_length
                "integer",  # multi_data_type
                "",  # multi_regex_pattern
                "",  # multi_choices_input
                True,  # multi_choice_case_sensitive
                "equals",  # multi_comparison_operator
                "",  # multi_comparison_value
                False,  # multi_trim_option
                "",  # result_multi_simple
                ""   # preview_multi_simple
            ]
        
        # √âv√©nements
        preview_multi_simple_btn.click(
            preview_multi_simple_rule,
            inputs=[
                multi_columns_input, multi_rule_type_dropdown, multi_message_input,
                multi_min_length, multi_max_length, multi_data_type, multi_regex_pattern,
                multi_choices_input, multi_choice_case_sensitive, multi_comparison_operator,
                multi_comparison_value, multi_trim_option
            ],
            outputs=[preview_multi_simple]
        )
        
        create_multi_simple_btn.click(
            create_multi_simple_rule,
            inputs=[
                multi_columns_input, multi_rule_type_dropdown, multi_message_input,
                multi_min_length, multi_max_length, multi_data_type, multi_regex_pattern,
                multi_choices_input, multi_choice_case_sensitive, multi_comparison_operator,
                multi_comparison_value, multi_trim_option
            ],
            outputs=[result_multi_simple]
        )
        
        clear_multi_simple_btn.click(
            clear_multi_simple_form,
            outputs=[
                multi_columns_input, multi_rule_type_dropdown, multi_message_input,
                multi_min_length, multi_max_length, multi_data_type, multi_regex_pattern,
                multi_choices_input, multi_choice_case_sensitive, multi_comparison_operator,
                multi_comparison_value, multi_trim_option, result_multi_simple, preview_multi_simple
            ]
        )
    
    def _create_conditional_rules_section(self):
            """Section pour cr√©er des r√®gles conditionnelles"""
            gr.Markdown("## üîó Cr√©ation de R√®gles Conditionnelles", elem_classes=["section-title"])
            
            with gr.Row():
                with gr.Column():
                    gr.Markdown("### üí° Exemple d'utilisation")
                    gr.Markdown("""
                    **Cas d'usage typique :**
                    - Si colonne **Statut** = "VIP" **ET** colonne **Pays** = "France"
                    - Alors colonne **Montant** doit √™tre entre 1000 et 10000
                    
                    **Comment proc√©der :**
                    1. D√©finissez vos conditions (jusqu'√† 3)
                    2. Choisissez l'op√©rateur logique (ET/OU)
                    3. D√©finissez l'action √† effectuer
                    4. Personnalisez le message d'erreur
                    """)
            
            gr.Markdown("---")
            
            with gr.Row():
                with gr.Column():
                    gr.Markdown("#### üîç **√âTAPE 1 : D√©finir les Conditions**", elem_classes=["conditional-section"])
                    
                    # Condition 1 (obligatoire)
                    with gr.Group():
                        gr.Markdown("**üî∏ Condition 1** (obligatoire)")
                        cond1_column = gr.Textbox(
                            label="Colonne √† v√©rifier",
                            value="A",
                            placeholder="ex: A, B, Statut..."
                        )
                        cond1_operator = gr.Dropdown(
                            label="Op√©rateur de comparaison",
                            choices=[
                                ("√âgal √†", "equals"),
                                ("Diff√©rent de", "not_equals"),
                                ("Plus grand que", "greater_than"),
                                ("Plus petit que", "less_than"),
                                ("Plus grand ou √©gal", "greater_equal"),
                                ("Plus petit ou √©gal", "less_equal"),
                                ("Commence par", "starts_with"),
                                ("Finit par", "ends_with"),
                                ("Contient", "contains"),
                                ("Ne contient pas", "not_contains"),
                                ("Est vide", "is_empty"),
                                ("N'est pas vide", "is_not_empty")
                            ],
                            value="equals"
                        )
                        cond1_value = gr.Textbox(
                            label="Valeur de comparaison",
                            placeholder="ex: VIP, 100, France...",
                            visible=True
                        )
                    
                    # Condition 2 (optionnelle)
                    with gr.Group():
                        gr.Markdown("**üî∏ Condition 2** (optionnelle)")
                        cond2_enabled = gr.Checkbox(
                            label="üîÑ Activer la condition 2",
                            value=False
                        )
                        cond2_logic = gr.Radio(
                            label="Op√©rateur logique avec condition 1",
                            choices=[("ET (toutes les conditions)", "AND"), ("OU (au moins une condition)", "OR")],
                            value="AND",
                            visible=False
                        )
                        cond2_column = gr.Textbox(
                            label="Colonne √† v√©rifier",
                            value="B",
                            placeholder="ex: B, C, Pays...",
                            visible=False
                        )
                        cond2_operator = gr.Dropdown(
                            label="Op√©rateur de comparaison",
                            choices=[
                                ("√âgal √†", "equals"),
                                ("Diff√©rent de", "not_equals"),
                                ("Plus grand que", "greater_than"),
                                ("Plus petit que", "less_than"),
                                ("Plus grand ou √©gal", "greater_equal"),
                                ("Plus petit ou √©gal", "less_equal"),
                                ("Commence par", "starts_with"),
                                ("Finit par", "ends_with"),
                                ("Contient", "contains"),
                                ("Ne contient pas", "not_contains"),
                                ("Est vide", "is_empty"),
                                ("N'est pas vide", "is_not_empty")
                            ],
                            value="equals",
                            visible=False
                        )
                        cond2_value = gr.Textbox(
                            label="Valeur de comparaison",
                            placeholder="ex: France, 18, Premium...",
                            visible=False
                        )
                    
                    # Condition 3 (optionnelle)
                    with gr.Group():
                        gr.Markdown("**üî∏ Condition 3** (optionnelle)")
                        cond3_enabled = gr.Checkbox(
                            label="üîÑ Activer la condition 3",
                            value=False
                        )
                        cond3_column = gr.Textbox(
                            label="Colonne √† v√©rifier",
                            value="C",
                            placeholder="ex: C, D, Age...",
                            visible=False
                        )
                        cond3_operator = gr.Dropdown(
                            label="Op√©rateur de comparaison",
                            choices=[
                                ("√âgal √†", "equals"),
                                ("Diff√©rent de", "not_equals"),
                                ("Plus grand que", "greater_than"),
                                ("Plus petit que", "less_than"),
                                ("Plus grand ou √©gal", "greater_equal"),
                                ("Plus petit ou √©gal", "less_equal"),
                                ("Commence par", "starts_with"),
                                ("Finit par", "ends_with"),
                                ("Contient", "contains"),
                                ("Ne contient pas", "not_contains"),
                                ("Est vide", "is_empty"),
                                ("N'est pas vide", "is_not_empty")
                            ],
                            value="equals",
                            visible=False
                        )
                        cond3_value = gr.Textbox(
                            label="Valeur de comparaison",
                            placeholder="ex: Actif, 2024, Premium...",
                            visible=False
                        )
                
                with gr.Column():
                    gr.Markdown("#### ‚ö° **√âTAPE 2 : D√©finir l'Action**", elem_classes=["conditional-section"])
                    
                    # Action principale
                    with gr.Group():
                        gr.Markdown("**üéØ Action √† effectuer QUAND les conditions sont vraies**")
                        action_column = gr.Textbox(
                            label="Colonne cible (qui sera v√©rifi√©e)",
                            value="E",
                            placeholder="ex: E, F, Montant..."
                        )
                        action_type = gr.Dropdown(
                            label="Type de validation √† appliquer",
                            choices=[
                                ("Doit √™tre vide", "must_be_empty"),
                                ("Ne doit pas √™tre vide", "must_not_be_empty"),
                                ("Doit √™tre entre deux valeurs", "must_be_between"),
                                ("Doit √™tre dans la liste", "must_be_in_list"),
                                ("Doit correspondre au pattern regex", "must_match_pattern")
                            ],
                            value="must_not_be_empty"
                        )
                        
                        # Param√®tres d'action dynamiques
                        with gr.Group():
                            action_min = gr.Number(
                                label="Valeur minimale",
                                value=0,
                                visible=False
                            )
                            action_max = gr.Number(
                                label="Valeur maximale",
                                value=100,
                                visible=False
                            )
                            action_list = gr.Textbox(
                                label="Liste de valeurs autoris√©es (s√©par√©es par des virgules)",
                                placeholder="ex: Oui,Non,Peut-√™tre",
                                visible=False
                            )
                            action_pattern = gr.Textbox(
                                label="Pattern regex √† respecter",
                                placeholder="ex: \\\\d{2}-\\\\d{2}-\\\\d{4}",
                                visible=False
                            )
                    
                    # Message d'erreur et logique g√©n√©rale
                    gr.Markdown("#### üìù **√âTAPE 3 : Configuration Finale**", elem_classes=["conditional-section"])
                    
                    with gr.Group():
                        main_logic = gr.Radio(
                            label="Si plusieurs conditions, logique g√©n√©rale",
                            choices=[
                                ("Toutes les conditions doivent √™tre vraies (ET)", "AND"), 
                                ("Au moins une condition doit √™tre vraie (OU)", "OR")
                            ],
                            value="AND"
                        )
                        
                        cond_message = gr.Textbox(
                            label="Message d'erreur personnalis√©",
                            placeholder="ex: Les clients VIP doivent avoir un montant entre 1000 et 10000",
                            lines=3
                        )
            
            # Boutons d'action
            gr.Markdown("---")
            with gr.Row():
                create_cond_btn = gr.Button("‚úÖ Cr√©er la r√®gle conditionnelle", variant="primary", size="lg")
                clear_cond_btn = gr.Button("üóëÔ∏è Effacer tous les champs", variant="secondary")
                preview_cond_btn = gr.Button("üëÅÔ∏è Pr√©visualiser la r√®gle", variant="secondary")
            
            # Zone de r√©sultat et pr√©visualisation
            with gr.Row():
                with gr.Column():
                    result_conditional = gr.Markdown()
                with gr.Column():
                    preview_conditional = gr.Markdown()
            
            # Fonctions pour l'interface conditionnelle
            def toggle_condition2(enabled):
                return [
                    gr.update(visible=enabled),
                    gr.update(visible=enabled),
                    gr.update(visible=enabled),
                    gr.update(visible=enabled)
                ]
            
            def toggle_condition3(enabled):
                return [
                    gr.update(visible=enabled),
                    gr.update(visible=enabled),
                    gr.update(visible=enabled)
                ]
            
            def update_action_params(action_type):
                return [
                    gr.update(visible=action_type == "must_be_between"),
                    gr.update(visible=action_type == "must_be_between"),
                    gr.update(visible=action_type == "must_be_in_list"),
                    gr.update(visible=action_type == "must_match_pattern")
                ]
            
            def update_cond1_value_visibility(operator):
                return gr.update(visible=operator not in ["is_empty", "is_not_empty"])
            
            def update_cond2_value_visibility(operator):
                return gr.update(visible=operator not in ["is_empty", "is_not_empty"])
            
            def update_cond3_value_visibility(operator):
                return gr.update(visible=operator not in ["is_empty", "is_not_empty"])
            
            def preview_conditional_rule(c1_col, c1_op, c1_val, c2_enabled, c2_logic, c2_col, c2_op, c2_val,
                                    c3_enabled, c3_col, c3_op, c3_val, a_col, a_type, a_min, a_max, 
                                    a_list, a_pattern, message, logic):
                try:
                    preview = "### üëÅÔ∏è Aper√ßu de votre r√®gle conditionnelle\\n\\n"
                    preview += "**üîç CONDITIONS :**\\n"
                    preview += f"- Si colonne **{c1_col}** {c1_op.replace('_', ' ')} "
                    
                    if c1_op not in ["is_empty", "is_not_empty"]:
                        preview += f"**'{c1_val}'**"
                    
                    if c2_enabled and c2_col:
                        logic_word = "ET" if c2_logic == "AND" else "OU"
                        preview += f"\\n- {logic_word} colonne **{c2_col}** {c2_op.replace('_', ' ')} "
                        if c2_op not in ["is_empty", "is_not_empty"]:
                            preview += f"**'{c2_val}'**"
                    
                    if c3_enabled and c3_col:
                        logic_word = "ET" if logic == "AND" else "OU"
                        preview += f"\\n- {logic_word} colonne **{c3_col}** {c3_op.replace('_', ' ')} "
                        if c3_op not in ["is_empty", "is_not_empty"]:
                            preview += f"**'{c3_val}'**"
                    
                    preview += f"\\n\\n**‚ö° ACTION :**\\n"
                    preview += f"- Alors colonne **{a_col}** {a_type.replace('_', ' ').replace('must ', 'doit ')}"
                    
                    if a_type == "must_be_between":
                        preview += f" **{a_min}** et **{a_max}**"
                    elif a_type == "must_be_in_list" and a_list:
                        preview += f" : **{a_list}**"
                    elif a_type == "must_match_pattern" and a_pattern:
                        preview += f" : **{a_pattern}**"
                    
                    preview += f"\\n\\n**üìù MESSAGE :** {message}"
                    
                    return preview
                    
                except Exception as e:
                    return f"‚ùå Erreur dans la pr√©visualisation : {str(e)}"
            
            def create_conditional_rule(c1_col, c1_op, c1_val, c2_enabled, c2_logic, c2_col, c2_op, c2_val,
                                    c3_enabled, c3_col, c3_op, c3_val, a_col, a_type, a_min, a_max, 
                                    a_list, a_pattern, message, logic):
                try:
                    # Construction des conditions
                    conditions = [{
                        "column": c1_col,
                        "operator": c1_op,
                        "value": c1_val if c1_op not in ["is_empty", "is_not_empty"] else ""
                    }]
                    
                    if c2_enabled and c2_col:
                        conditions.append({
                            "column": c2_col,
                            "operator": c2_op,
                            "value": c2_val if c2_op not in ["is_empty", "is_not_empty"] else ""
                        })
                    
                    if c3_enabled and c3_col:
                        conditions.append({
                            "column": c3_col,
                            "operator": c3_op,
                            "value": c3_val if c3_op not in ["is_empty", "is_not_empty"] else ""
                        })
                    
                    # Construction des actions
                    action_params = {}
                    if a_type == "must_be_between":
                        action_params = {"min": a_min, "max": a_max}
                    elif a_type == "must_be_in_list":
                        action_params = {"values": [v.strip() for v in a_list.split(",") if v.strip()]}
                    elif a_type == "must_match_pattern":
                        action_params = {"pattern": a_pattern}
                    
                    actions = [{
                        "column": a_col,
                        "type": a_type,
                        "params": action_params
                    }]
                    
                    # Cr√©ation de la r√®gle
                    rule = self.rules_manager.add_conditional_rule(conditions, actions, message, logic)
                    self.rules_manager.save_rules()
                    
                    success_msg = f"""
                    ‚úÖ **R√®gle conditionnelle cr√©√©e avec succ√®s !**
                    
                    **üìã D√©tails :**
                    - **ID :** {rule['id']}
                    - **Conditions :** {len(conditions)} condition(s)
                    - **Actions :** {len(actions)} action(s)
                    - **Logique :** {logic}
                    - **Message :** {message}
                    
                    üéØ La r√®gle est maintenant active et sera appliqu√©e lors de la validation.
                    """
                    
                    return success_msg
                    
                except Exception as e:
                    return f"‚ùå **Erreur lors de la cr√©ation :** {str(e)}"
            
            def clear_conditional_form():
                """Remet √† z√©ro tous les champs du formulaire conditionnel"""
                return [
                    "A",  # cond1_column
                    "equals",  # cond1_operator
                    "",  # cond1_value
                    False,  # cond2_enabled
                    "AND",  # cond2_logic
                    "B",  # cond2_column
                    "equals",  # cond2_operator
                    "",  # cond2_value
                    False,  # cond3_enabled
                    "C",  # cond3_column
                    "equals",  # cond3_operator
                    "",  # cond3_value
                    "E",  # action_column
                    "must_not_be_empty",  # action_type
                    0,  # action_min
                    100,  # action_max
                    "",  # action_list
                    "",  # action_pattern
                    "AND",  # main_logic
                    "La condition n'est pas respect√©e",  # cond_message
                    "",  # result_conditional
                    ""   # preview_conditional
                ]
            
            # √âv√©nements de l'interface
            cond2_enabled.change(
                toggle_condition2, 
                inputs=[cond2_enabled], 
                outputs=[cond2_logic, cond2_column, cond2_operator, cond2_value]
            )
            
            cond3_enabled.change(
                toggle_condition3, 
                inputs=[cond3_enabled], 
                outputs=[cond3_column, cond3_operator, cond3_value]
            )
            
            action_type.change(
                update_action_params, 
                inputs=[action_type], 
                outputs=[action_min, action_max, action_list, action_pattern]
            )
            
            cond1_operator.change(update_cond1_value_visibility, inputs=[cond1_operator], outputs=[cond1_value])
            cond2_operator.change(update_cond2_value_visibility, inputs=[cond2_operator], outputs=[cond2_value])
            cond3_operator.change(update_cond3_value_visibility, inputs=[cond3_operator], outputs=[cond3_value])
            
            preview_cond_btn.click(
                preview_conditional_rule,
                inputs=[cond1_column, cond1_operator, cond1_value, cond2_enabled, cond2_logic,
                    cond2_column, cond2_operator, cond2_value, cond3_enabled, cond3_column,
                    cond3_operator, cond3_value, action_column, action_type, action_min,
                    action_max, action_list, action_pattern, cond_message, main_logic],
                outputs=[preview_conditional]
            )
            
            create_cond_btn.click(
                create_conditional_rule,
                inputs=[cond1_column, cond1_operator, cond1_value, cond2_enabled, cond2_logic,
                    cond2_column, cond2_operator, cond2_value, cond3_enabled, cond3_column,
                    cond3_operator, cond3_value, action_column, action_type, action_min,
                    action_max, action_list, action_pattern, cond_message, main_logic],
                outputs=[result_conditional]
            )
            
            clear_cond_btn.click(
                clear_conditional_form,
                outputs=[cond1_column, cond1_operator, cond1_value, cond2_enabled, cond2_logic,
                        cond2_column, cond2_operator, cond2_value, cond3_enabled, cond3_column,
                        cond3_operator, cond3_value, action_column, action_type, action_min,
                        action_max, action_list, action_pattern, main_logic, cond_message, 
                        result_conditional, preview_conditional]
            )
    def _create_management_tab(self):
        """Cr√©e l'onglet de gestion des r√®gles (mis √† jour pour inclure multicolonnes)"""
        gr.Markdown("## üìã Gestion des R√®gles", elem_classes=["section-title"])
        
        with gr.Row():
            refresh_btn = gr.Button("üîÑ Actualiser", variant="secondary")
            
            # Zone d'import/export avec boutons c√¥te √† c√¥te
            with gr.Row():
                # Colonne Export
                with gr.Column():
                    export_btn = gr.Button("üì§ Exporter les r√®gles", variant="primary", scale=1)
                    rules_download = gr.File(
                        label="üì• Fichier de r√®gles export√©",
                        visible=False,
                        interactive=False
                    )
                
                # Colonne Import
                with gr.Column():
                    import_btn = gr.Button("üì• Importer des r√®gles", variant="primary", scale=1)
                    import_file = gr.File(
                        label="S√©lectionner le fichier (.json)",
                        file_types=[".json"]
                    )
        
        # Tableau des r√®gles (maintenant avec support multicolonne)
        rules_table = gr.Dataframe(
            headers=["ID", "Type", "Colonne(s)", "R√®gle", "Message", "Status"],
            datatype=["str", "str", "str", "str", "str", "str"],
            interactive=False,
            wrap=True
        )
        
        # Actions sur les r√®gles
        with gr.Row():
            with gr.Column():
                rule_id_input = gr.Textbox(label="ID de la r√®gle", placeholder="Copier l'ID depuis le tableau")
                rule_type_input = gr.Radio(
                    label="Type de r√®gle",
                    choices=[("Simple", "simple"), ("Conditionnelle", "conditional"), ("Multicolonne", "multicolumn")],
                    value="simple"
                )
            
            with gr.Column():
                toggle_btn = gr.Button("üîÑ Activer/D√©sactiver", variant="secondary")
                delete_btn = gr.Button("üóëÔ∏è Supprimer", variant="stop")
        
        management_result = gr.Markdown()
        
        def refresh_rules_table():
            """Actualise le tableau des r√®gles"""
            summary = self.rules_manager.get_rules_summary()
            return summary
        
        def export_rules():
            """Exporte les r√®gles dans un fichier temporaire pour t√©l√©chargement"""
            try:
                # Cr√©er un fichier temporaire pour l'export
                temp_file = os.path.join(tempfile.gettempdir(), f"regles_export_{int(time.time())}.json")
                
                # Exporter les r√®gles dans le fichier temporaire
                if self.rules_manager.export_rules(temp_file):
                    return temp_file, gr.update(visible=True)
                return None, gr.update(visible=False)
                
            except (OSError, ValueError) as e:
                print(f"Erreur lors de l'export: {e}")
                return None, gr.update(visible=False)
        
        def toggle_rule(rule_id, rule_type):
            """Active/d√©sactive une r√®gle"""
            if not rule_id:
                return "‚ùå Veuillez saisir un ID de r√®gle"
            
            success = self.rules_manager.toggle_rule(rule_id, rule_type)
            if success:
                self.rules_manager.save_rules()
                return f"‚úÖ Statut de la r√®gle {rule_id} modifi√©"
            return f"‚ùå R√®gle {rule_id} introuvable"
        
        def delete_rule(rule_id, rule_type):
            """Supprime une r√®gle"""
            if not rule_id:
                return "‚ùå Veuillez saisir un ID de r√®gle"
            
            success = self.rules_manager.delete_rule(rule_id, rule_type)
            if success:
                self.rules_manager.save_rules()
                return f"‚úÖ R√®gle {rule_id} supprim√©e"
            return f"‚ùå R√®gle {rule_id} introuvable"
        

        
        def import_rules(file):
            """Importe les r√®gles"""
            if file is None:
                return "‚ùå Veuillez s√©lectionner un fichier"
            
            success = self.rules_manager.import_rules(file.name)
            if success:
                return "‚úÖ R√®gles import√©es avec succ√®s"
            return "‚ùå Erreur lors de l'import - V√©rifiez le format du fichier"
        
        # Connexion des √©v√©nements
        refresh_btn.click(refresh_rules_table, outputs=[rules_table])
        toggle_btn.click(toggle_rule, inputs=[rule_id_input, rule_type_input], outputs=[management_result])
        delete_btn.click(delete_rule, inputs=[rule_id_input, rule_type_input], outputs=[management_result])
        export_btn.click(export_rules, outputs=[rules_download, rules_download])
        import_btn.click(import_rules, inputs=[import_file], outputs=[management_result])
        
        return rules_table, refresh_rules_table
    
    def _create_validation_tab(self):
        """Cr√©e l'onglet de validation Excel (mis √† jour pour multicolonnes)"""
        gr.Markdown("## ‚úÖ Validation de fichiers Excel", elem_classes=["section-title"])
        
        with gr.Row():
            with gr.Column():
                # Upload de fichier
                file_input = gr.File(
                    label="üìÅ S√©lectionnez votre fichier Excel",
                    file_types=[".xlsx", ".xls", ".xlsm"],
                    type="filepath"
                )
                
                sheet_name = gr.Textbox(
                    label="Nom de la feuille (optionnel)",
                    placeholder="Laissez vide pour la premi√®re feuille",
                    value=""
                )
                
                validate_btn = gr.Button("üöÄ Lancer la validation", variant="primary", size="lg")
            
            with gr.Column():
                # Informations sur les r√®gles actives (mise √† jour pour multicolonnes)
                active_rules_info = gr.Markdown("**R√®gles actives :** Chargement...")
        
        # R√©sultats de validation
        with gr.Row():
            validation_summary = gr.Markdown()
        
        with gr.Row():
            with gr.Column():
                errors_table = gr.Dataframe(
                    label="üìã D√©tail des erreurs",
                    headers=["Ligne", "Colonne(s)", "Coordonn√©e", "Message", "Valeur(s)"],
                    visible=False,
                    wrap=True
                )
            
            with gr.Column():
                download_section = gr.Group(visible=False)
                with download_section:
                    gr.Markdown("### üì• T√©l√©chargements")
                    error_file_download = gr.File(label="Fichier Excel avec erreurs marqu√©es")
                    csv_download_button = gr.DownloadButton(
                        label="üìä T√©l√©charger le rapport CSV",
                        visible=False
                    )
        
        def get_active_rules_info():
            """Retourne les informations sur les r√®gles actives (mise √† jour)"""
            
            # V√©rification et initialisation de rules_manager si n√©cessaire
            if not hasattr(self, 'rules_manager') or self.rules_manager is None:
                try:
                    # Import et initialisation de RulesManager
                    from rules_manager import RulesManager  # Ajustez le nom du module selon votre structure
                    self.rules_manager = RulesManager()
                    print("RulesManager initialis√© avec succ√®s dans get_active_rules_info")
                except Exception as e:
                    error_msg = f"‚ùå **Erreur d'initialisation du gestionnaire de r√®gles :**\n{str(e)}"
                    print(f"Erreur lors de l'initialisation de RulesManager: {e}")
                    return error_msg
            
            try:
                # Comptage des r√®gles actives
                simple_count = len([r for r in self.rules_manager.rules["simple_rules"] if r["active"]])
                multi_simple_count = len([r for r in self.rules_manager.rules.get("multi_simple_rules", []) if r["active"]])
                cond_count = len([r for r in self.rules_manager.rules["conditional_rules"] if r["active"]])
                multi_count = len([r for r in self.rules_manager.rules["multicolumn_rules"] if r["active"]])
                
                # Comptage par type de r√®gles simples
                rule_types = {}
                for rule in self.rules_manager.rules["simple_rules"]:
                    if rule["active"]:
                        rule_type = rule["rule_type"]
                        rule_types[rule_type] = rule_types.get(rule_type, 0) + 1
                
                # Comptage des r√®gles simples multicolonnes par type
                multi_simple_types = {}
                for rule in self.rules_manager.rules.get("multi_simple_rules", []):
                    if rule["active"]:
                        rule_type = rule["rule_type"]
                        multi_simple_types[rule_type] = multi_simple_types.get(rule_type, 0) + 1
                
                # Formatage des r√©sultats
                types_str = ", ".join([f"{count} {rtype}" for rtype, count in rule_types.items()]) if rule_types else "aucune"
                multi_simple_types_str = ", ".join([f"{count} {rtype}(multi)" for rtype, count in multi_simple_types.items()]) if multi_simple_types else "aucune"
                
                return f"""
        **üìä R√®gles actives actuellement :**
        - **{simple_count}** r√®gles simples ({types_str})
        - **{multi_simple_count}** r√®gles simples multicolonnes ({multi_simple_types_str}) üÜï
        - **{cond_count}** r√®gles conditionnelles
        - **{multi_count}** r√®gles multicolonnes avanc√©es
        - **Total : {simple_count + multi_simple_count + cond_count + multi_count}** r√®gles

        *Les r√®gles d√©sactiv√©es ne seront pas appliqu√©es lors de la validation.*
        """
            
            except Exception as e:
                error_msg = f"""
        ‚ùå **Erreur lors de la r√©cup√©ration des informations sur les r√®gles :**
        {str(e)}

        **D√©tails techniques :**
        - Type de self: {type(self)}
        - rules_manager exists: {hasattr(self, 'rules_manager')}
        - rules_manager type: {type(self.rules_manager) if hasattr(self, 'rules_manager') and self.rules_manager else 'None'}
        """
                print(f"Erreur dans get_active_rules_info: {e}")
                return error_msg
        
        def validate_excel_file( file_path, sheet):
            """Valide un fichier Excel (mise √† jour pour r√®gles simples multicolonnes)"""
            if not file_path:
                return (
                    "‚ùå **Erreur :** Veuillez s√©lectionner un fichier Excel",
                    gr.update(visible=False),
                    gr.update(visible=False),
                    None,
                    gr.update(visible=False)
                )
            
            try:
                # Conversion des r√®gles au format de validation
                config = self.rules_manager.convert_to_yaml_config()
                
                # Validation du fichier
                success, errors, error_file_path = self.validator.validate_file(
                    file_path, config, sheet if sheet else None
                )
                
                # R√©sum√© de validation
                summary = self.validator.get_validation_summary()
                
                if success:
                    active_simple = len([r for r in self.rules_manager.rules["simple_rules"] if r["active"]])
                    active_multi_simple = len([r for r in self.rules_manager.rules.get("multi_simple_rules", []) if r["active"]])  
                    active_cond = len([r for r in self.rules_manager.rules["conditional_rules"] if r["active"]])
                    active_multi = len([r for r in self.rules_manager.rules["multicolumn_rules"] if r["active"]])
                    
                    return (
                        f"""<div class="success-message">
                        {summary['message']}
                        
                        **üìÅ Fichier :** {os.path.basename(file_path)}
                        **üìä Lignes trait√©es :** Validation compl√®te
                        **üîç R√®gles appliqu√©es :** {active_simple} simples + {active_multi_simple} simples multi + {active_cond} conditionnelles + {active_multi} multicolonnes
                        </div>""",
                        gr.update(visible=False),
                        gr.update(visible=False),
                        None,
                        gr.update(visible=False)
                    )
                else:
                    # Pr√©paration du tableau d'erreurs
                    errors_df = self.validator.get_errors_as_dataframe()
                    
                    # Pr√©paration du fichier CSV pour t√©l√©chargement
                    csv_path = None
                    if not errors_df.empty:
                        csv_path = tempfile.mktemp(suffix='.csv')
                        errors_df.to_csv(csv_path, sep=';', index=False, encoding='utf-8')
                    
                    active_simple = len([r for r in self.rules_manager.rules["simple_rules"] if r["active"]])
                    active_multi_simple = len([r for r in self.rules_manager.rules.get("multi_simple_rules", []) if r["active"]])  
                    active_cond = len([r for r in self.rules_manager.rules["conditional_rules"] if r["active"]])
                    active_multi = len([r for r in self.rules_manager.rules["multicolumn_rules"] if r["active"]])
                    
                    summary_text = f"""<div class="error-message">
                    {summary['message']}
                    
                    **üìÅ Fichier :** {os.path.basename(file_path)}
                    **üìä Total erreurs :** {summary['total_errors']}
                    **üîç Erreurs simples :** {summary.get('simple_errors', 0)}
                    **üî¢ Erreurs simples multicolonnes :** {summary.get('multi_simple_errors', 0)} üÜï
                    **üî¢ Erreurs multicolonnes avanc√©es :** {summary.get('multicolumn_errors', 0)}
                    **üîç R√®gles appliqu√©es :** {active_simple} simples + {active_multi_simple} simples multi + {active_cond} conditionnelles + {active_multi} multicolonnes
                    
                    **üîç R√©partition par type :**
                    """
                    
                    for error_type, count in summary.get('errors_by_type', {}).items():
                        summary_text += f"\\n- {error_type}: {count} erreur(s)"
                    
                    summary_text += "\\n</div>"
                    
                    return (
                        summary_text,
                        gr.update(visible=True, value=errors_df.values.tolist()),
                        gr.update(visible=True),
                        error_file_path,
                        gr.update(visible=True, value=csv_path) if csv_path else gr.update(visible=False)
                    )
                    
            except Exception as e:
                return (
                    f"‚ùå **Erreur lors de la validation :** {str(e)}",
                    gr.update(visible=False),
                    gr.update(visible=False),
                    None,
                    gr.update(visible=False)
                )
        
        # Connexion des √©v√©nements
        validate_btn.click(
            validate_excel_file,
            inputs=[file_input, sheet_name],
            outputs=[validation_summary, errors_table, download_section, error_file_download, csv_download_button]
        )
        
        return active_rules_info, get_active_rules_info
    
    def launch(self, **kwargs):
        """Lance l'interface Gradio"""
        interface = self.create_interface()
        return interface.launch(**kwargs)

# Point d'entr√©e principal
if __name__ == "__main__":
    app = GradioInterface()
    app.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        debug=True
    )
